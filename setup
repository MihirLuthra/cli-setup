#! /usr/bin/env bash

set -eo pipefail

SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE}")" && pwd )"

. "$SCRIPT_DIR/common"

install_fzf() {
	status_msg "\nEntered fzf setup"

	check_deps 'fzf' \
		python \
		git

	if command_exists 'fzf'
	then
		status_msg "fzf already installed, skipping fzf setup"
		return 0
	fi

	# installs fzf and enables completion and key bindings
	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
	~/.fzf/install --key-bindings --completion --update-rc
}

backup_file() {
	local file_path=$1; shift

	if [ ! -e "$file_path" ]
	then
		error_msg "Failed to backup $file_path as it doesn't exist"
		return 0
	fi

	local file="$(basename "$file_path")"
	local file_backup="/tmp/${file}_backup"
	local counter=0

	while [ -f "${file_backup}_${counter}" ]
	do
		counter=$( expr $counter + 1 )
	done

	local backup_file="${file_backup}_${counter}"

	cp "$file_path" "$backup_file"

	status_msg "backed up $file_path at $backup_file"
}

backup_zshrc() {
	backup_file "$ZSHRC"
}

backup_vimrc() {
	backup_file "$VIMRC"
}

setup_zsh() {
	status_msg "\nEntered zsh setup"

	check_deps 'setup_zsh' \
		zsh \
		curl

	local zsh="$(command -v zsh)"

	# install ohmyzsh
	if [ -e "$HOME/.oh-my-zsh" ]
	then
		status_msg "$HOME/.oh-my-zsh already installed, skipping ohmyzsh setup"
	else
		status_msg "Installing ohmyzsh"

		export CHSH='no'
		export RUNZSH='no'
		sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
		unset CHSH
		unset RUNZSH
	fi

	if [ -f "$HOME/antigen.zsh" ]
	then
		status_msg "$HOME/antigen.zsh already exists, skipping antigen setup"
	else
		status_msg "Installing antigen"

		curl -L git.io/antigen > $HOME/antigen.zsh

		backup_zshrc

		local zsh_contents="$( < "$ZSHRC" )"
		local to_prepend="$( < "$SHELL_SUPPORT_FILES/plugins.zsh" )"

		echo "$to_prepend" > "$ZSHRC"
		echo "$zsh_contents" >> "$ZSHRC"
	fi

	if [ -e "$HOME/.zsh/pure" ]
	then
		status_msg "$HOME/.zsh/pure already exists, skipping setup for theme pure"
	else
		status_msg "Installing zsh theme named 'pure'"

		backup_zshrc

		mkdir -p "$HOME/.zsh"
		git clone https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"

		echo 'fpath+=$HOME/.zsh/pure' >> "$ZSHRC"
		echo 'autoload -U promptinit; promptinit' >> "$ZSHRC"
		echo 'prompt pure' >> "$ZSHRC"
	fi

	success_msg "zsh setup successful, you will need to change shell manually by:"
	success_msg 'sudo chsh -s "$(command -v zsh)" "$USER"'
	success_msg "You may need to restart the system for the changes to take effect"
	success_msg "Meanwhile, you can do 'exec zsh' to start using zsh"
}

setup_nvim() {
	status_msg "Entered neovim setup"

	check_deps 'setup neovim' \
		bash-language-server \
		curl \
		node \
		npm \
		nvim \
		vim

	local coc_config="$HOME/.vim/coc-settings.json"
	local nvim_coc_config="$HOME/.config/nvim/coc-settings.json"

	status_msg "Sharing config between vim and nvim"
	mkdir -p ~/.config/nvim
	touch "$VIMRC"
	printf "%s\n" \
		'set runtimepath^=~/.vim runtimepath+=~/.vim/after' \
		'let &packpath=&runtimepath' \
		'source ~/.vimrc' \
		>> "$HOME/.config/nvim/init.vim"

	status_msg "Installing vim-plug for vim"

	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	status_msg "Installing vim-plug for neovim"

	sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

	status_msg "Now setting $VIMRC"

	backup_vimrc

	local new_vimrc_contents="$( < "$VIM_SUPPORT_FILES/plugins.vim" )"

	echo "$new_vimrc_contents" > "$VIMRC"

	vim -c 'PlugInstall | echo "Please quit vim when plugins are installed"' "$VIMRC"

	echo -e "\n\nso $VIM_SUPPORT_FILES/coc_nvim_example_config.vim" >> "$VIMRC"

	status_msg "Setting up $coc_config and $nvim_coc_config"

	backup_file "$coc_config"
	backup_file "$nvim_coc_config"

	local new_coc_config_contents="$( < "$SUPPORT_FILES/coc_config.json" )"

	echo "$new_coc_config_contents" > "$coc_config"
	echo "$new_coc_config_contents" > "$nvim_coc_config"

	success_msg "Neovim setup complete"
	success_msg "See: https://github.com/neoclide/coc.nvim/wiki/Language-servers"
}

persistent_undo() {
	status_msg "Going to set persistent undo in vim"

	backup_vimrc

	echo "so $VIM_SUPPORT_FILES/persistent_undo.vim" >> "$VIMRC"

	success_msg "Successfully added persistent undo code to $VIMRC"
}

main() {
	setup_zsh
	
	install_fzf

	setup_nvim

	persistent_undo

	success_msg "SETUP DONE!"
}

main "$@"
